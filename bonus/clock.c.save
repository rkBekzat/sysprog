#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef long long ll;
#define NUMS 50000000

#define MAX(x, y) (((x) > (y)) ? (x) : (y))
#define MIN(x, y) (((x) < (y)) ? (x) : (y))

static void assign(ll *arr, int *p1, const ll *cur, int *p2){
    arr[*p1] = cur[*p2];
    (*p1)++;
    (*p2)++;
}
void combine(ll *arr, int l, int r){
    int mid = (l+r)/2;
    int pointer1 = l;
    int pointer2 = mid+1, position = 0;
    ll *answer = (ll *) malloc((r-l+1) * sizeof (ll));
    while(pointer1 <= mid || pointer2 <= r) {
        if(pointer1 > mid){
            assign(answer, &position, arr, &pointer2);
            continue;
        }
        if(pointer2 > r){
            assign(answer, &position, arr, &pointer1);
            continue;
        }
        if(arr[pointer1] < arr[pointer2]){
            assign(answer, &position, arr, &pointer1);
        } else {
            assign(answer, &position, arr, &pointer2);
        }
    }
    for(int i = l; i <= r; i++){
        arr[i] = answer[i-l];
    }
    free(answer);
}

void sort(ll *a, int l, int r){
    if(l==r) return ;
    int mid = (l + r) / 2;
    sort(a, l, mid);
    sort(a, mid+1, r);

    combine(a, l, r);
}

void bench(clockid_t id, const char* name){
    struct timespec start, end, ex;
    ll timings[NUMS];
    ll mn = -1;
    ll mx = -1;
    ll total = 0;


    for(int i = 0; i < NUMS; i++){
        clock_gettime(CLOCK_MONOTONIC, &start);
        clock_gettime(id, &ex);
        clock_gettime(CLOCK_MONOTONIC, &end);
        timings[i] = (end.tv_sec - start.tv_sec) * 1000000000LL + (end.tv_nsec - start.tv_nsec);

        if(mx == -1){
            mx = timings[i];
            mn = timings[i];
            total = timings[i];
        } else {
            mx = MAX(mx, timings[i]);
            mn = MIN(mn, timings[i]);
            total += timings[i];
        }
    }
    int mid = NUMS / 2;
    ll median;

    sort(timings, 0, NUMS-1);
 
    median = timings[mid];

    printf("Clock: %s\n", name);
    printf("Min duration per call: %lld ns\n", mn);
    printf("Max duration per call: %lld ns\n", mx);
    printf("Median duration per call: %lld ns\n", median);
    printf("Average duration per call: %lld ns\n", total/NUMS);
}


int main(){
    bench(CLOCK_REALTIME, "CLOCK_REALTIME");
    bench(CLOCK_MONOTONIC, "CLOCK_MONOTONIC");
    bench(CLOCK_MONOTONIC_RAW, "CLOCK_MONOTONIC_RAW");
}
